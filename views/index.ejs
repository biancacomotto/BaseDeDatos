<!DOCTYPE html>
<html lang="es">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>MovieWeb</title>
    <style>
        body {
            font-family: 'Arial', sans-serif;
            background: radial-gradient(circle, rgba(255,60,172,1) 0%, rgba(120,75,160,1) 40%, rgba(43,134,197,1) 100%);
            display: flex;
            flex-direction: column;
            justify-content: center;
            align-items: center;
            height: 100vh;
            margin: 0;
            overflow: hidden;
            position: relative; /* Para posicionar los elementos sobre el canvas */
        }

        canvas {
            position: fixed;
            left: 0;
            top: 0;
            width: 100%;
            height: 100%;
            z-index: -1; /* Mantiene el canvas detr치s del contenido */
        }

        h1 {
            font-size: 36px;
            color: #ffffff; /* Cambia el color si es necesario para mejor contraste */
            margin-bottom: 20px;
            margin-right: 100px;
            background-color: rgba(0, 0, 0, 0.5); /* A침adir un color de fondo (opcional) */
            padding: 10px 20px; /* A침adir espacio interno */
            border-radius: 30px; /* Aqu칤 se a침aden bordes redondeados */
        }

        form {
            text-align: center;
        }

        input[type="text"] {
            padding: 10px;
            width: 300px;
            border: 1px solid #ccc;
            border-radius: 20px;
            font-size: 18px;
            margin-right: 10px;
        }

        button[type="submit"] {
            background-color: #000000;
            color: white;
            border: none;
            border-radius: 20px;
            padding: 10px 20px;
            font-size: 18px;
            cursor: pointer;
        }

        button[type="submit"]:hover {
            background-color: #2c86e0;
        }
    </style>
</head>
<body>
<canvas id="canvas"></canvas> <!-- Canvas para las part칤culas -->

<!-- Contenido principal -->
<h1>MovieWeb游꿟</h1>
<form action="/buscar" method="GET">
    <!-- Campo para la b칰squeda -->
    <input type="text" name="q" placeholder="Buscar pel칤culas, actores y directores..." required />

    <!-- Men칰 desplegable para seleccionar tipo de b칰squeda -->
    <select name="tipoBusqueda">
        <option value="movie">Pel칤cula</option>
        <option value="actor">Actor</option>
        <option value="director">Director</option>
    </select>

    <!-- Bot칩n de b칰squeda -->
    <button type="submit">Buscar</button>
</form>


<script>
    // C칩digo de part칤culas animadas
    const canvas = document.querySelector("#canvas");
    const ctx = canvas.getContext("2d");

    let w, h, particles;
    let particleDistance = 40;
    let mouse = {
        x: undefined,
        y: undefined,
        radius: 100
    }

    function init() {
        resizeReset();
        animationLoop();
    }

    function resizeReset() {
        w = canvas.width = window.innerWidth;
        h = canvas.height = window.innerHeight;

        particles = [];
        for (let y = (((h - particleDistance) % particleDistance) + particleDistance) / 2; y < h; y += particleDistance) {
            for (let x = (((w - particleDistance) % particleDistance) + particleDistance) / 2; x < w; x += particleDistance) {
                particles.push(new Particle(x, y));
            }
        }
    }

    function animationLoop() {
        ctx.clearRect(0, 0, w, h);
        drawScene();
        requestAnimationFrame(animationLoop);
    }

    function drawScene() {
        for (let i = 0; i < particles.length; i++) {
            particles[i].update();
            particles[i].draw();
        }
        drawLine();
    }

    function drawLine() {
        for (let a = 0; a < particles.length; a++) {
            for (let b = a; b < particles.length; b++) {
                let dx = particles[a].x - particles[b].x;
                let dy = particles[a].y - particles[b].y;
                let distance = Math.sqrt(dx * dx + dy * dy);

                if (distance < particleDistance * 1.5) {
                    let opacity = 1 - (distance / (particleDistance * 1.5));
                    ctx.strokeStyle = "rgba(255,255,255," + opacity + ")";
                    ctx.lineWidth = 2;
                    ctx.beginPath();
                    ctx.moveTo(particles[a].x, particles[a].y);
                    ctx.lineTo(particles[b].x, particles[b].y);
                    ctx.stroke();
                }
            }
        }
    }

    function mousemove(e) {
        mouse.x = e.x;
        mouse.y = e.y;
    }

    function mouseout() {
        mouse.x = undefined;
        mouse.y = undefined;
    }

    class Particle {
        constructor(x, y) {
            this.x = x;
            this.y = y;
            this.size = 4;
            this.baseX = this.x;
            this.baseY = this.y;
            this.speed = (Math.random() * 25) + 5;
        }
        draw() {
            ctx.fillStyle = "rgba(255,255,255,1)";
            ctx.beginPath();
            ctx.arc(this.x, this.y, this.size, 0, Math.PI * 2);
            ctx.closePath();
            ctx.fill();
        }
        update() {
            let dx = mouse.x - this.x;
            let dy = mouse.y - this.y;
            let distance = Math.sqrt(dx * dx + dy * dy);
            let maxDistance = mouse.radius;
            let force = (maxDistance - distance) / maxDistance; // 0 ~ 1
            let forceDirectionX = dx / distance;
            let forceDirectionY = dy / distance;
            let directionX = forceDirectionX * force * this.speed;
            let directionY = forceDirectionY * force * this.speed;

            if (distance < mouse.radius) {
                this.x -= directionX;
                this.y -= directionY;
            } else {
                if (this.x !== this.baseX) {
                    let dx = this.x - this.baseX;
                    this.x -= dx / 10;
                }
                if (this.y !== this.baseY) {
                    let dy = this.y - this.baseY;
                    this.y -= dy / 10;
                }
            }
        }
    }

    init();
    window.addEventListener("resize", resizeReset);
    window.addEventListener("mousemove", mousemove);
    window.addEventListener("mouseout", mouseout);
</script>
</body>
</html>
